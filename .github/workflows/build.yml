name: CI

on:
  push:
    branches: [ master ]

  workflow_dispatch:

jobs:
  build:
    runs-on: macos-12

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'recursive'
          fetch-depth: '0'

      - name: Set active Xcode path
        run: |
          XCODE_VERSION=$(cat versions.json | python3 -c 'import json,sys;obj=json.load(sys.stdin);print(obj["xcode"]);')
          sudo xcode-select -s /Applications/Xcode_$XCODE_VERSION.app/Contents/Developer

      - name: Create canonical source directory
        run: |
          set -x
          sudo mkdir /Users/telegram
          sudo chown -R $(whoami) /Users/telegram
          cp -R $GITHUB_WORKSPACE /Users/telegram/
          mv /Users/telegram/$(basename $GITHUB_WORKSPACE) /Users/telegram/telegram-ios

      - name: Build the App
        run: |
          set -x

          # source code paths are included in the final binary, so we need to make them stable across builds
          SOURCE_DIR=/Users/telegram/telegram-ios

          # use canonical bazel root
          BAZEL_USER_ROOT="/private/var/tmp/_bazel_telegram"

          cd $SOURCE_DIR

          BUILD_NUMBER_OFFSET="$(cat build_number_offset)"

          export APP_VERSION=$(cat versions.json | python3 -c 'import json,sys;obj=json.load(sys.stdin);print(obj["app"]);')
          export COMMIT_COUNT=$(git rev-list --count HEAD)
          export COMMIT_COUNT="$(($COMMIT_COUNT+$BUILD_NUMBER_OFFSET))"
          export BUILD_NUMBER="$COMMIT_COUNT"
          echo "BUILD_NUMBER=$(echo $BUILD_NUMBER)" >> $GITHUB_ENV
          echo "APP_VERSION=$(echo $APP_VERSION)" >> $GITHUB_ENV

          # prepare temporary keychain
          export MY_KEYCHAIN="temp.keychain"
          export MY_KEYCHAIN_PASSWORD="secret"
          security create-keychain -p "$MY_KEYCHAIN_PASSWORD" "$MY_KEYCHAIN"
          security list-keychains -d user -s "$MY_KEYCHAIN" $(security list-keychains -d user | sed s/\"//g)
          security set-keychain-settings "$MY_KEYCHAIN"
          security unlock-keychain -p "$MY_KEYCHAIN_PASSWORD" "$MY_KEYCHAIN"

          # install certificates
          mkdir -p $HOME/codesigning/certs
          echo $APPLE_DISTRIBUTION_V2 | base64 -di - > "$HOME/codesigning/certs/dist.p12"
          # security import "dist.p12" -k "$MY_KEYCHAIN" -P "$APPLE_DISTRIBUTION_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
          # security set-key-partition-list -S apple-tool:,apple: -k "$MY_KEYCHAIN_PASSWORD" "$MY_KEYCHAIN"
          mkdir -p $HOME/codesigning/profiles
          cp telegram-configuration-dist/provisioning/* $HOME/codesigning/profiles/

          # use the official release configuration
          rm -rf $HOME/telegram-configuration
          mkdir -p $HOME/telegram-configuration
          cp -R telegram-configuration-dist/* $HOME/telegram-configuration/

          # build the app
          python3 build-system/Make/Make.py \
            --bazelUserRoot="$BAZEL_USER_ROOT" \
            --cacheDir="$HOME/telegram-bazel-cache" \
            build \
            --disableParallelSwiftmoduleGeneration \
            --configurationPath="$HOME/telegram-configuration/appstore-configuration.json" \
            --codesigningInformationPath="$HOME/codesigning/" \
            --buildNumber=$BUILD_NUMBER \
            --configuration=release_universal

          # collect ipa
          OUTPUT_PATH="build/artifacts"
          rm -rf "$OUTPUT_PATH"
          mkdir -p "$OUTPUT_PATH"
          for f in bazel-out/applebin_ios-ios_arm*-opt-ST-*/bin/Telegram/Telegram.ipa; do
            cp "$f" $OUTPUT_PATH/
          done

          # collect dsym
          mkdir -p build/DSYMs
          for f in bazel-out/applebin_ios-ios_arm*-opt-ST-*/bin/Telegram/*.dSYM; do
            cp -R "$f" build/DSYMs/
          done
          zip -r "./$OUTPUT_PATH/Telegram.DSYMs.zip" build/DSYMs 1>/dev/null
        env:
          APPLE_DISTRIBUTION: ${{ secrets.APPLE_DISTRIBUTION }}
          APPLE_DISTRIBUTION_PASSWORD: ${{ secrets.APPLE_DISTRIBUTION_PASSWORD }}

      - name: Upload IPA
        uses: actions/upload-artifact@v2
        with:
          name: release-ipa
          path: /Users/telegram/telegram-ios/build/artifacts/Telegram.ipa

      - name: Upload DSYM
        uses: actions/upload-artifact@v2
        with:
          name: release-dsym
          path: /Users/telegram/telegram-ios/build/artifacts/Telegram.DSYMs.zip

      - name: Deploy to App Store Connect
        run: |
          xcrun altool --upload-app --type ios \
            --file /Users/telegram/telegram-ios/build/artifacts/Telegram.ipa \
            --username "${{ secrets.APPSTORE_CONNECT_USERNAME }}" \
            --password "${{ secrets.APPSTORE_CONNECT_PASSWORD }}" --verbose

      - name: Upload to channel
        env:
          CHANNEL_ID: ${{ secrets.CHANNEL_ID }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          BOT_API_SERVER: ${{ secrets.BOT_API_SERVER }}
        run: |
          cd /Users/telegram/telegram-ios
          mv /Users/telegram/telegram-ios/build/artifacts/Telegram.ipa "/Users/telegram/telegram-ios/build/artifacts/Nanogram-$APP_VERSION-$BUILD_NUMBER.ipa"
          mv /Users/telegram/telegram-ios/build/artifacts/Telegram.DSYMs.zip "/Users/telegram/telegram-ios/build/artifacts/Nanogram-$APP_VERSION-$BUILD_NUMBER.DSYMs.zip"
          eval $(python3 buildbox/sendMediaGroup.py)
